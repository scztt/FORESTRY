{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green102\blue0;\red0\green0\blue0;\red0\green0\blue179;
\red179\green0\blue179;\red128\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\qc\pardirnatural

\f0\fs30 \cf2 // . . . F O R E S T R Y . . . //\cf3 \

\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 \

\fs24 b = \cf4 Buffer\cf3 .alloc( s, \cf5 10\cf3 *s.sampleRate );\
b.zero;\
\
~e_1 = \cf4 Buffer\cf3 .alloc( s, \cf5 2\cf3 **\cf5 10 \cf3 );\
	~e_1.sendCollection( \cf4 Env\cf3 ([\cf5 0\cf3 , \cf5 1\cf3 ,\cf5 0.7\cf3 ,\cf5 1\cf3 , \cf5 0\cf3 ], [\cf5 0.25\cf3 ,\cf5 0.25\cf3 ,\cf5 0.25\cf3 ,\cf5 0.25\cf3 ], \cf6 \\sin\cf3 ).asSignal(\cf5 1024\cf3 ).squared )\
	~e_1.plot\
\
~e_2 = \cf4 Buffer\cf3 .alloc( s, \cf5 2\cf3 **\cf5 10 \cf3 );\
	~e_2.sendCollection( \cf4 Env\cf3 ([\cf5 0\cf3 , \cf5 1\cf3 , \cf5 0\cf3 ], [\cf5 1\cf3 , \cf5 1\cf3 ], \cf6 \\sin\cf3 ).asSignal(\cf5 1024\cf3 ) )\
\
w = \cf4 SCWindow\cf3 ().front;\
\
\
~grainDelay = \{\
	\cf4 | in, buffer, env1, env2,\
		rate=0.1, srate=1, dur=0.1, delay=0.5, envi=0.5, feedback=0.7, feedFunc, trig |\cf3 \
	\cf4 var\cf3  sig, recPhase, normRecPhase,\
		d_trig, reset, \
		d_dur, d_srate, d_rate, d_delay, d_envi, pos;\
		\
	feedFunc = feedFunc ? \{\
		\cf4 | in |\cf3 \
		\cf4 LPF\cf3 .ar( in, \cf5 700 \cf3 );\
	\};\
	\cf2 // input and recording\cf3 \
	in = \cf4 SoundIn\cf3 .ar(in) + \cf4 LeakDC\cf3 .ar( feedback * feedFunc.( \cf4 LocalIn\cf3 .ar(\cf5 1\cf3 )) );\
	recPhase = \cf4 Phasor\cf3 .ar(\cf5 1\cf3 , \
		rate: 	\cf4 BufRateScale\cf3 .kr(buffer), \
		end: 	\cf4 BufSamples\cf3 .kr(buffer)\
	);\
	normRecPhase = recPhase / \cf4 BufSamples\cf3 .kr(buffer);\
	\cf4 BufWr\cf3 .ar(in, buffer, recPhase, \cf5 1\cf3 );\
\
	\cf2 // grain controls\cf3 \
	d_trig 	= trig ? \cf4 TDuty\cf3 .ar(rate, \cf5 0\cf3 , \cf5 1\cf3 );\
	reset 	= \cf5 0\cf3 ;\
	\
	\cf2 // Demand stuff\cf3 \
	d_dur 	= \cf4 Demand\cf3 .ar(d_trig, reset, dur);\
	d_srate	= \cf4 Demand\cf3 .ar(d_trig, reset, srate);\
	d_envi 	= \cf4 Demand\cf3 .ar(d_trig, reset, envi);\
	d_delay = \cf4 Demand\cf3 .ar(d_trig, reset, delay);\
	pos 	= normRecPhase - (d_delay/\cf4 BufDur\cf3 .kr(buffer));\
	\
	\cf2 // grain ugen\cf3 \
	sig = \cf4 BufGrainI\cf3 .ar(\
		trigger: 	d_trig,\
		dur: 		d_dur,\
		sndbuf: 	buffer,\
		rate:		d_srate,\
		pos:		pos,\
		envbuf1: env1, envbuf2: env2,\
		ifac:		d_envi,\
		interp: \cf5 4\cf3 \
	);\
	\
	\cf4 LocalOut\cf3 .ar(sig);\
	\
	sig;\
\};\
\
\cf4 SynthDef\cf3 ( \cf6 \\grainDelay\cf3 , \{\
	\cf4 | in, out, buffer, env1, env2, envi=0.5 |\cf3 \
	\cf4 var\cf3  inSig, sig, ff;\
	inSig = \cf4 SoundIn\cf3 .ar(in);\
	ff = \{\
		\cf4 | in |\cf3 \
		\cf4 var\cf3  sig, bands;\
		bands = [\cf5 60\cf3 ,\cf5 70\cf3 ,\cf5 80\cf3 ,\cf5 90\cf3 ,\cf5 7000\cf3 ];\
		sig = bands.collect(\{\
			\cf4 | band |\cf3 \
			\cf4 var\cf3  filtered, q;\
			q = (\
				\cf4 LagUD\cf3 .kr(\cf4 Amplitude\cf3 .kr(inSig.clip(\cf5 -1\cf3 ,\cf5 1\cf3 ), \cf5 0.01\cf3 , \cf5 0.01\cf3 ), \cf5 0.01\cf3 , \cf5 10\cf3 )\
			*\cf5 100\cf3 +\cf5 4\cf3 );\
			q = q + \cf4 LFNoise2\cf3 .kr(\cf5 10\cf3 ).range(\cf5 0\cf3 ,\cf5 80\cf3 );\
			\cf4 Out\cf3 .kr(\cf5 10\cf3 , q);\
			filtered = \cf4 BPF\cf3 .ar( in, \
				band, \
				q/band\
			);\
			filtered = \cf4 Compander\cf3 .ar( filtered, in, \cf4 MouseX\cf3 .kr(\cf5 0.01\cf3 ,\cf5 0.5\cf3 ), \cf5 1\cf3 /\cf5 50\cf3 , \cf5 1\cf3 /\cf5 50 \cf3 );\
		\}).sum;\
		sig = \cf4 HPF\cf3 .ar( sig, \cf5 160 \cf3 );\
		sig = \cf4 LPF\cf3 .ar( sig, \cf5 4000 \cf3 );\
	\};\
	sig = ~grainDelay.(\
		in:	\cf5 0\cf3 , buffer: buffer, env1: env1, env2: env2,\
		rate:	\cf5 1\cf3 /\cf5 100\cf3 ,\
		dur:	\cf5 0.2,\cf3 \
		delay:	\cf4 Dwhite\cf3 (\cf5 0.05\cf3 , \cf5 0.88\cf3 , \cf4 inf\cf3 ),\
		envi:	envi,\
		feedback:	\cf5 0.7\cf3 ,\
		feedFunc:	ff\
	);\
	\cf4 Out\cf3 .ar(\cf5 0\cf3 , sig!\cf5 2\cf3 );\
\}).add;\
\
n = \cf4 Synth\cf3 (\cf6 \\grainDelay\cf3 , \
	[\
		\cf6 \\in\cf3 , \cf5 0\cf3 ,\
		\cf6 \\out\cf3 , \cf5 0\cf3 ,\
		\cf6 \\buffer\cf3 , b.bufnum,\
		\cf6 \\env1\cf3 , ~e_1.bufnum,\
		\cf6 \\env2\cf3 , ~e_1.bufnum\
	]);\
	\
n.set( \cf6 \\envi\cf3 , \cf5 0\cf3 );\
\
\
\cf4 Bus\cf3 (\cf6 \\control\cf3 , \cf5 10\cf3 , \cf5 1\cf3 , s).debugScope;}