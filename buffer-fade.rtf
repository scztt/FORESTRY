{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 DejaVuSansMono;}
{\colortbl;\red255\green255\blue255;\red0\green102\blue0;\red255\green102\blue0;\red0\green0\blue179;
\red77\green77\blue77;\red179\green0\blue179;\red0\green0\blue255;\red102\green0\blue102;\red51\green51\blue191;
\red128\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 // Buffer crossfader\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 ~out\cf0  = \cf4 Buffer\cf5 (\cf0 s\cf5 ,\cf0  \cf6 100\cf5 );\cf0 \
\cf3 ~out\cf5 .\cf0 updateInfo\cf5 ();\cf0 \
\cf3 ~bufs\cf0  = \cf6 10\cf5 .\cf0 collect\cf5 (\{\cf0 \
	\cf4 Buffer\cf5 .\cf0 loadCollection\cf5 (\cf0 s\cf5 ,\cf0  \cf5 [\cf6 10\cf5 .\cf0 rand\cf5 ,\cf0  \cf6 10\cf5 .\cf0 rand\cf5 ,\cf0  \cf6 10\cf5 .\cf0 rand\cf5 ,\cf0  \cf6 10\cf5 .\cf0 rand\cf5 ,\cf0  \cf6 10\cf5 .\cf0 rand\cf5 ].\cf0 postln\cf5 .\cf0 resamp1\cf5 (\cf6 100\cf5 ).\cf0 postln\cf5 );\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf5 \});\cf0 \
\
\
\cf5 (\cf0 \
	\cf7 var\cf0  name=\cf8 "buffer-test"\cf5 ,\cf0  bounds\cf5 ,\cf0  minval\cf5 ,\cf0  maxval\cf5 ;\cf0 \
	\cf7 var\cf0  plotter\cf5 ;\cf0 \
	if\cf5 (\cf0 s\cf5 .\cf0 serverRunning\cf5 .\cf0 not\cf5 )\cf0  \cf5 \{\cf0  \cf8 "Server % not running"\cf5 .\cf0 format\cf5 (\cf0 s\cf5 ).\cf0 warn\cf5 ;\cf0  ^\cf9 nil\cf0  \cf5 \};\cf0 \
	plotter = \cf5 [\cf6 0\cf5 ].\cf0 plot\cf5 (\cf0 \
		name ? \cf8 "Buffer plot (bufnum: %)"\cf5 .\cf0 format\cf5 (\cf3 ~out\cf5 .\cf0 bufnum\cf5 ),\cf0 \
		bounds\cf5 ,\cf0  minval: minval\cf5 ,\cf0  maxval: maxval\
	\cf5 );\cf0 \
	\cf4 Routine\cf5 (\{\cf0  \
		while\cf5 (\{\cf0  plotter\cf5 .\cf0 notNil and: \cf5 \{\cf0 plotter\cf5 .\cf0 interactionView\cf5 .\cf0 isClosed\cf5 .\cf0 not\cf5 \}\},\cf0  \cf5 \{\cf0 \
			\cf3 ~out\cf5 .\cf0 loadToFloatArray\cf5 (\cf0 action: \cf5 \{\cf0  \cf7 |array, buf|\cf0 \
				if\cf5 (\cf0 minval\cf5 .\cf0 isNumber && maxval\cf5 .\cf0 isNumber\cf5 ,\{\cf0 \
					plotter\cf5 .\cf0 specs = \cf5 [\cf0 minval\cf5 ,\cf0 maxval\cf5 ].\cf0 asSpec\
				\cf5 \},\{\cf0 \
					minval !? \cf5 \{\cf0  plotter\cf5 .\cf0 minval = minval\cf5 ;\cf0  \cf5 \};\cf0 \
					maxval !? \cf5 \{\cf0  plotter\cf5 .\cf0 maxval = maxval \cf5 \};\cf0 \
				\cf5 \});\cf0 \
				plotter\cf5 .\cf0 domainSpecs = \cf4 ControlSpec\cf5 (\cf6 0.0\cf5 ,\cf0 buf\cf5 .\cf0 numFrames\cf5 ,\cf0 units:\cf8 "frames"\cf5 );\cf0 \
				plotter\cf5 .\cf0 setValue\cf5 (\cf0 array\cf5 .\cf0 unlace\cf5 (\cf0 buf\cf5 .\cf0 numChannels\cf5 ),\cf9 false\cf5 ,\cf9 true\cf5 );\cf0 \
			\cf5 \});\cf0 \
			\cf6 0.05\cf5 .\cf0 yield\cf5 ;\cf0 \
		\cf5 \});\cf0 \
	\cf5 \}).\cf0 play\cf5 (\cf4 AppClock\cf5 );\cf0 \
	^plotter\
\cf5 )\cf0 \
\
k = \cf4 KorgControl\cf5 (\cf0 s\cf5 ,\cf0  \cf10 \\bufferfade\cf5 );\cf0 \
k\cf5 .\cf0 debugMode = \cf9 false\cf5 ;\cf0 \
k\cf5 .\cf0 debugScope\cf5 ;\cf0 \
k\cf5 .\cf0 start\cf5 ();\cf0 \
\
\cf5 (\cf0 \
\cf7 var\cf0  window\cf5 ,\cf0  button\cf5 ,\cf0  \
	buffer\cf5 ;\cf0 \
\cf7 var\cf0  dbSpec = \cf5 [\cf6 -1\cf5 ,\cf6 1\cf5 ].\cf0 asSpec\cf5 ;\cf0 \
\
k\cf5 .\cf0 setSpec\cf5 (\cf10 \\knob1\cf5 ,\cf0  \cf5 [\cf6 100\cf5 ,\cf0  \cf6 8000\cf5 ,\cf0  \cf10 \\exp\cf5 ].\cf0 asSpec\cf5 );\cf0 \
k\cf5 .\cf0 setSpec\cf5 (\cf10 \\knob2\cf5 ,\cf0  \cf5 [\cf6 0.001\cf5 ,\cf0  \cf6 0.95\cf5 ].\cf0 asSpec\cf5 );\cf0 \
k\cf5 .\cf0 setSpec\cf5 (\cf10 \\knob3\cf5 ,\cf0  \cf5 [\cf6 0.1\cf5 ,\cf0  \cf6 35\cf5 ].\cf0 asSpec\cf5 );\cf0 \
k\cf5 .\cf0 setSpec\cf5 (\cf10 \\knob4\cf5 ,\cf0  \cf5 [\cf6 0\cf5 ,\cf0  \cf6 1\cf5 ].\cf0 asSpec\cf5 );\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 ~buffer\cf0  = \cf4 Buffer\cf5 .\cf0 alloc\cf5 (\cf0 s\cf5 ,\cf0  \cf6 512\cf5 ,\cf0  \cf6 1\cf5 ,\cf0  bufnum:\cf6 0\cf5 );\cf0 \
\cf3 ~buffer\cf5 .\cf0 updateInfo\cf5 ;\cf0 \
\
\cf3 ~music\cf0  = \cf4 Buffer\cf5 .\cf0 read\cf5 (\cf0 s\cf5 ,\cf8 "../../Documents/_sounds/Pale Star.wav"\cf5 .\cf0 resolveRelative\cf5 ,\cf0  bufnum:\cf6 1\cf5 );\cf0 \
\
window = \cf4 QWindow\cf5 ();\cf0 \
\
b = \cf4 BSpline\cf5 ([[\cf6 0\cf5 ,\cf0  \cf6 0\cf5 ],\cf0  \cf5 [\cf6 1\cf5 ,\cf0  \cf6 0\cf5 ],\cf0  \cf5 [\cf6 2\cf5 ,\cf0  \cf6 0\cf5 ]],\cf0  \cf6 6.0\cf5 );\cf0 \
g = b\cf5 .\cf0 gui\cf5 (\cf0 window\cf5 ,\cf0  \cf9 nil\cf5 ,\cf0  \cf4 ControlSpec\cf5 (\cf6 -5\cf5 ,\cf0  \cf6 5\cf5 ,\cf0  \cf10 \\db\cf5 ,\cf0  units:\cf8 "dB"\cf5 ),\cf0  \cf4 ControlSpec\cf5 (\cf6 0\cf5 ,\cf0  \cf6 2\cf5 ));\cf0 \
g\cf5 .\cf0 orderSpec = \cf5 [\cf6 2\cf5 ,\cf0  \cf6 100\cf5 ,\cf0  \cf10 \\exponential\cf5 ].\cf0 asSpec\cf5 ;\cf0 \
\
button = \cf4 QButton\cf5 (\cf0 window\cf5 )\cf0 \
	\cf5 .\cf0 action_\cf5 (\{\cf0 \
		\cf7 var\cf0  table\cf5 ,\cf0  values\cf5 ;\cf0 \
		values = \cf4 Signal\cf5 .\cf0 newFrom\cf5 (\cf0 b\cf5 .\cf0 bilinearInterpolate\cf5 (\cf6 256\cf5 ).\cf0 collect\cf5 (\{\cf0 \
			\cf7 | y, i |\cf0 \
			\cf5 (\cf0 dbSpec\cf5 .\cf0 map\cf5 (\cf0 i/\cf6 256\cf5 )\cf0  + y\cf5 );\cf0 \
		\cf5 \}));\cf0 \
		\cf3 ~buffer\cf5 .\cf0 sendCollection\cf5 (\cf0 values\cf5 .\cf0 asWavetableNoWrap\cf5 );\cf0 \
	\cf5 \});\cf0 \
\
window\cf5 .\cf0 layout = \cf4 VLayout\cf5 (\cf0 g\cf5 .\cf0 view\cf5 ,\cf0  button\cf5 );\cf0 \
window\cf5 .\cf0 layout\cf5 .\cf0 spacing = \cf6 20\cf5 ;\cf0 \
window\cf5 .\cf0 layout\cf5 .\cf0 margins = \cf5 [\cf6 10\cf5 ,\cf0  \cf6 30\cf5 ,\cf0  \cf6 10\cf5 ,\cf0  \cf6 30\cf5 ];\cf0 \
window\cf5 .\cf0 front\cf5 ;\cf0 \
\
p = b\cf5 .\cf0 bilinearInterpolate\cf5 (\cf6 256\cf5 ).\cf0 plot\cf5 (\cf0 minval:\cf6 -16\cf5 .\cf0 dbamp\cf5 ,\cf0  maxval:\cf6 16\cf5 .\cf0 dbamp\cf5 );\cf0 \
\
b\cf5 .\cf0 addDependant\cf5 (\cf0 f = \cf5 \{\cf0 \
	p\cf5 .\cf0 value = b\cf5 .\cf0 bilinearInterpolate\cf5 (\cf6 256\cf5 ).\cf0 collect\cf5 (\{\cf0 \
		\cf7 | y, i |\cf0  \
		\cf7 var\cf0  finaldB = dbSpec\cf5 .\cf0 map\cf5 (\cf0 i/\cf6 256\cf5 )\cf0  + y\cf5 .\cf0 dbamp\cf5 ;\cf0 \
		finaldB\cf5 ;\cf0 \
	\cf5 \});\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf5 \});\cf0 \
\
n = \cf5 \{\cf0 \
	\cf7 | freq = 500, width = 0.5, preamp = 5, amt = 1 |\cf0 \
	\cf7 var\cf0  amp\cf5 ,\cf0  inSig\cf5 ,\cf0  lowPassSig\cf5 ,\cf0  highPassSig\cf5 ,\cf0  shapeSig\cf5 ,\cf0  outSig\cf5 ;\cf0 \
	\
	inSig = \cf4 PlayBuf\cf5 .\cf0 ar\cf5 (\cf6 1\cf5 ,\cf0  \cf3 ~music\cf5 .\cf0 bufnum\cf5 ,\cf0  rate:\cf6 0.4\cf5 ,\cf0  loop:\cf6 1\cf5 )\cf0  * \cf5 [\cf6 1\cf5 ,\cf6 1\cf5 ];\cf0 \
	inSig = \cf4 SinOsc\cf5 .\cf0 ar\cf5 (\cf4 Array\cf5 .\cf0 linrand\cf5 (\cf6 30\cf5 ,\cf0  \cf6 30\cf5 ,\cf0  \cf6 330\cf5 ),\cf0  \cf4 Array\cf5 .\cf0 linrand\cf5 (\cf6 30\cf5 ,\cf0  \cf6 0\cf5 ,\cf0  \cf6 1\cf5 )).\cf0 sum * \cf6 (1/30) * [1, 1]\cf5 ;\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 //	highPassSig = BHiPass.ar(inSig, cutoff);\cf0 \
\cf2 //	lowPassSig = BLowPass.ar(inSig, cutoff);\cf0 \
\
	width = width * freq\cf5 ;\cf0 \
	highPassSig = \cf4 BPeakEQ\cf5 .\cf0 ar\cf5 (\cf0 inSig\cf5 ,\cf0  freq\cf5 ,\cf0  width/freq\cf5 ,\cf0  preamp\cf5 .\cf0 neg\cf5 );\cf0 \
	lowPassSig = inSig - highPassSig\cf5 ;\cf0  \
\
	amp = \cf4 PeakFollower\cf5 .\cf0 ar\cf5 (\cf0 lowPassSig\cf5 ,\cf0  \cf6 0.999\cf5 ).\cf0 max\cf5 (\cf6 -128\cf5 .\cf0 dbamp\cf5 );\cf0 \
\
	shapeSig = \cf5 (\cf0 lowPassSig / amp\cf5 );\cf0  	\
	shapeSig = \cf4 Shaper\cf5 .\cf0 ar\cf5 (\cf3 ~buffer\cf5 .\cf0 bufnum\cf5 ,\cf0  shapeSig\cf5 );\cf0 \
	shapeSig = \cf5 (\cf0 shapeSig * amp\cf5 );\cf0 \
	shapeSig = \cf4 BLowPass\cf5 .\cf0 ar\cf5 (\cf0 shapeSig\cf5 ,\cf0  freq*\cf6 2\cf5 );\cf0 \
	\
	outSig = \
		\cf4 XFade2\cf5 .\cf0 ar\cf5 (\cf0 lowPassSig\cf5 ,\cf0  shapeSig\cf5 ,\cf0  amt*\cf6 2-1\cf5 );\cf0 \
		\
	outSig\cf5 ;\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf5 \}.\cf0 play\cf5 (\cf0 args: \cf5 [\cf10 \\freq\cf5 ,\cf0  k\cf5 .\cf0 asMap\cf5 (\cf10 \\knob1\cf5 ),\cf0  \cf10 \\width\cf5 ,\cf0  k\cf5 .\cf0 asMap\cf5 (\cf10 \\knob2\cf5 ),\cf0  \cf10 \\preamp\cf5 ,\cf0  k\cf5 .\cf0 asMap\cf5 (\cf10 \\knob3\cf5 ),\cf0  \cf10 \\amt\cf5 ,\cf0  k\cf5 .\cf0 asMap\cf5 (\cf10 \\knob4\cf5 )]);\cf0 \
\
window\cf5 .\cf0 onClose_\cf5 (\{\cf0  n\cf5 .\cf0 free\cf5 ;\cf0  p\cf5 .\cf0 parent\cf5 .\cf0 close\cf5 ();\});\cf0 \
\cf4 CmdPeriod\cf5 .\cf0 doOnce\cf5 (\{\cf0  window\cf5 .\cf0 close\cf5 ()\cf0  \cf5 \});\cf0 \
n\cf5 .\cf0 trace\cf5 ;\cf0 \
\cf5 )\cf0 \
\
d = \cf4 SynthDef\cf5 (\cf10 \\bufferFade\cf5 ,\cf0  \cf5 \{\cf0 \
	\cf7 var\cf0  phase\cf5 ,\cf0  sig\cf5 ;\cf0 \
	phase = \cf4 Phasor\cf5 .\cf0 ar\cf5 (\cf6 1\cf5 ,\cf0  \cf6 1\cf5 ,\cf0  \cf6 0\cf5 ,\cf0  \cf6 100\cf5 );\cf0 \
	\
	sig = \cf3 ~bufInterpolate\cf5 .(\cf0  \
		\cf4 SinOsc\cf5 .\cf0 ar\cf5 (\cf6 0.05\cf5 ).\cf0 range\cf5 (\cf6 0\cf5 ,\cf6 1\cf5 ),\cf0 \
		\cf3 ~bufs\cf5 .\cf0 collect\cf5 (\cf4 _\cf5 .\cf0 bufnum\cf5 ),\cf0 \
		\cf5 \{\cf0  \
			\cf7 |b|\cf0  \
			b\cf5 .\cf0 postln\cf5 ;\cf0 \
			\cf4 BufRd\cf5 .\cf0 ar\cf5 (\cf6 1\cf5 ,\cf0  b\cf5 ,\cf0  phase\cf5 ,\cf0  \cf6 1\cf5 ,\cf0  \cf6 0\cf5 )\cf0  \
		\cf5 \}\cf0 \
	\cf5 );\cf0 \
	\cf4 BufWr\cf5 .\cf0 ar\cf5 (\cf0 sig\cf5 ,\cf0  \cf3 ~out\cf5 .\cf0 bufnum\cf5 ,\cf0  phase\cf5 );\cf0 \
\cf5 \}).\cf0 add\cf5 ;\cf0 \
d\cf5 .\cf0 draw\
\
n\cf5 .\cf0 free\cf5 ;\cf0 \
n = \cf4 Synth\cf5 (\cf10 \\bufferFade\cf5 );\cf0 \
n\cf5 .\cf0 inspect\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 ~bufInterpolate\cf0  = \cf5 \{\cf0 \
	\cf7 | pos = 0, buffers, func, width = 1 |\cf0 \
	\cf7 var\cf0  adjusted\cf5 ,\cf0  adjustedFloor\cf5 ,\cf0  xfade\cf5 ;\cf0 \
	\cf7 var\cf0  oddSig\cf5 ,\cf0  oddBuffer\cf5 ,\cf0  evenSig\cf5 ,\cf0  evenBuffer\cf5 ,\cf0  sig\cf5 ;\cf0 \
	\cf7 var\cf0  oddFunc = \cf5 (\cf4 _\cf0  % \cf6 2\cf5 ).\cf0 round\cf5 (\cf6 1\cf5 );\cf0 \
	\
	if \cf5 (\cf0 buffers\cf5 .\cf0 size > \cf6 1\cf5 )\cf0  \
	\cf5 \{\cf0 \
		adjusted = pos * \cf5 (\cf0 buffers\cf5 .\cf0 size - \cf6 1\cf5 );\cf0 \
		adjustedFloor = adjusted\cf5 .\cf0 floor\cf5 ;\cf0 \
		\
		xfade = adjusted - adjustedFloor\cf5 ;\cf0 \
		\
		buffers\cf5 .\cf0 postln\cf5 ;\cf0 \
		oddBuffer = \cf4 Select\cf5 .\cf0 kr\cf5 (\cf0 \
			oddFunc\cf5 .(\cf0 adjustedFloor\cf5 ).\cf0 if\cf5 (\cf0 adjustedFloor\cf5 ,\cf0  adjustedFloor + \cf6 1\cf5 ),\cf0  \
			buffers\cf5 );\cf0 \
		evenBuffer = \cf4 Select\cf5 .\cf0 kr\cf5 (\cf0 \
			oddFunc\cf5 .(\cf0 adjustedFloor\cf5 ).\cf0 not\cf5 .\cf0 if\cf5 (\cf0 adjustedFloor\cf5 ,\cf0  adjustedFloor + \cf6 1\cf5 ),\cf0  \
			buffers\cf5 );\cf0 \
		\
		oddSig = func\cf5 .\cf0 value\cf5 (\cf0 oddBuffer\cf5 );\cf0 \
		evenSig = func\cf5 .\cf0 value\cf5 (\cf0 evenBuffer\cf5 );\cf0 \
		\
		xfade = oddFunc\cf5 .(\cf0 adjustedFloor\cf5 ).\cf0 if\cf5 (\cf6 1 \cf0 - \cf5 x\cf0 fade\cf5 ,\cf0  xfade\cf5 );\cf0 \
		sig = \cf5 (\cf0 oddSig * xfade\cf5 )\cf0  + \cf5 (\cf0 evenSig * \cf5 (\cf6 1 \cf0 - \cf5 x\cf0 fade\cf5 ));\cf0 \
	\cf5 \}\cf0 \
	\cf5 \{\cf0 \
		sig = func\cf5 .(\cf0 buffers\cf5 [\cf6 0\cf5 ]);\cf0 \
	\cf5 \};\cf0 \
	\
	sig\cf5 ;\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf5 \};\cf0 \
\
\
d = \cf4 SynthDef\cf5 (\cf10 \\test\cf5 ,\cf0  \cf5 \{\cf0 \
	\cf7 var\cf0  a\cf5 ,\cf0  b\cf5 ;\cf0 \
	a = \cf4 LFSaw\cf5 .\cf0 ar\cf5 ();\cf0 \
	b = \cf4 Select\cf5 .\cf0 ar\cf5 (\cf0 a\cf5 ,\cf0  \cf5 [\cf4 LFSaw\cf5 .\cf0 ar\cf5 (),\cf0  \cf4 LFPulse\cf5 .\cf0 ar\cf5 (),\cf0  \cf4 SinOsc\cf5 .\cf0 ar\cf5 ()]);\cf0 \
	\cf4 LPF\cf5 .\cf0 ar\cf5 (\cf0 b\cf5 ,\cf0  \cf6 100\cf5 );\cf0 \
\cf5 \}).\cf0 add\cf5 ;\cf0 \
d\cf5 .\cf0 draw\cf5 ;}